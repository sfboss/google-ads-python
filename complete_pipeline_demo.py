#!/usr/bin/env python
"""
Complete YouTube Content to Keyword Research Pipeline Demo

This script demonstrates the complete pipeline from YouTube content extraction
through tokenization to Google Ads keyword research preparation.
"""

import json
import os
from datetime import datetime
from youtube_content_tokenizer import YouTubeContentTokenizer


def demo_complete_pipeline():
    """Demonstrate the complete YouTube to keyword research pipeline."""
    print("🚀 COMPLETE YOUTUBE CONTENT TO KEYWORD RESEARCH PIPELINE")
    print("=" * 70)
    
    # Initialize tokenizer
    tokenizer = YouTubeContentTokenizer()
    
    # Step 1: Extract and tokenize YouTube content
    print("\n📥 STEP 1: EXTRACTING & TOKENIZING YOUTUBE CONTENT")
    print("-" * 50)
    
    results = tokenizer.analyze_and_save_results(
        youtube_extracts_dir="/workspaces/google-ads-python/youtube_extracts",
        output_file="complete_pipeline_results.json"
    )
    
    if results.get("status") != "success":
        print("❌ Pipeline failed during content extraction")
        return
    
    # Step 2: Generate keyword seeds for Google Ads
    print("\n🎯 STEP 2: GENERATING KEYWORD SEEDS FOR GOOGLE ADS")
    print("-" * 50)
    
    tokenization = results.get("tokenization_results", {})\n    \n    # Extract top keywords as seeds\n    seed_keywords = []\n    combined_keywords = tokenization.get("combined_keywords", [])\n    if combined_keywords:\n        seed_keywords = [kw["keyword"] for kw in combined_keywords[:20]]\n        print(f"✅ Extracted {len(seed_keywords)} top keywords as seeds:")\n        for i, keyword in enumerate(seed_keywords[:10], 1):\n            print(f"   {i:2d}. {keyword}")\n        if len(seed_keywords) > 10:\n            print(f"   ... and {len(seed_keywords) - 10} more")\n    \n    # Extract top phrases as additional seeds\n    seed_phrases = []\n    phrases = tokenization.get("keyword_phrases", [])\n    if phrases:\n        seed_phrases = [phrase["phrase"] for phrase in phrases[:10]]\n        print(f"\\n✅ Extracted {len(seed_phrases)} top phrases as additional seeds:")\n        for i, phrase in enumerate(seed_phrases[:5], 1):\n            print(f"   {i}. \\\"{phrase}\\\"")\n        if len(seed_phrases) > 5:\n            print(f"   ... and {len(seed_phrases) - 5} more")\n    \n    all_seeds = seed_keywords + seed_phrases\n    \n    # Step 3: Prepare Google Ads research command\n    print(f"\\n📊 STEP 3: GOOGLE ADS KEYWORD RESEARCH PREPARATION")\n    print("-" * 50)\n    \n    print(f"✅ Total seeds prepared: {len(all_seeds)}")\n    print("\\n🛠️  To run Google Ads keyword research, use this command:")\n    print("   (Replace YOUR_CUSTOMER_ID with your actual Google Ads customer ID)\\n")\n    \n    # Create command with first 10 seeds (to keep command manageable)\n    sample_seeds = all_seeds[:10]\n    seeds_str = ' '.join([f'\\\"{seed}\\\"' for seed in sample_seeds])\n    \n    command = f\"python adwords_service.py youtube-keywords -c YOUR_CUSTOMER_ID --pretty\"\n    print(f"   {command}\\n")\n    \n    print("   Or use the traditional keyword-ideas command with extracted seeds:\\n")\n    command_traditional = f\"python adwords_service.py keyword-ideas -c YOUR_CUSTOMER_ID -k {seeds_str} --pretty\"\n    print(f"   {command_traditional}\\n")\n    \n    # Step 4: Content analysis summary\n    print("\\n📈 STEP 4: CONTENT ANALYSIS SUMMARY")\n    print("-" * 50)\n    \n    analysis_summary = results.get("analysis_summary", {})\n    content_analysis = tokenization.get("content_analysis", {})\n    \n    print(f"📁 Source: {analysis_summary.get('source_directory')}")\n    print(f"🎥 Videos Analyzed: {analysis_summary.get('videos_analyzed')}")\n    print(f"👀 Total Views: {analysis_summary.get('total_views'):,}")\n    print(f"🎯 Content Themes: {', '.join(analysis_summary.get('content_themes', []))}")\n    print(f"📂 Categories: {', '.join(analysis_summary.get('content_categories', []))}")\n    \n    # Top keywords summary\n    if combined_keywords:\n        print(f"\\n🔑 TOP 5 KEYWORDS FOR ADS TARGETING:")\n        for i, kw in enumerate(combined_keywords[:5], 1):\n            print(f"   {i}. {kw['keyword']} (frequency: {kw['frequency']})")\n    \n    # Top phrases summary\n    if phrases:\n        print(f"\\n📖 TOP 3 PHRASES FOR LONG-TAIL KEYWORDS:")\n        for i, phrase in enumerate(phrases[:3], 1):\n            print(f\"   {i}. \\\"{phrase['phrase']}\\\" (frequency: {phrase['frequency']})\")\n    \n    # Step 5: Save targeting suggestions\n    print(f\"\\n💾 STEP 5: SAVING GOOGLE ADS TARGETING SUGGESTIONS\")\n    print(\"-\" * 50)\n    \n    targeting_suggestions = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"source_analysis\": {\n            \"videos_analyzed\": analysis_summary.get('videos_analyzed'),\n            \"total_views\": analysis_summary.get('total_views'),\n            \"content_themes\": analysis_summary.get('content_themes', []),\n            \"content_categories\": analysis_summary.get('content_categories', [])\n        },\n        \"keyword_targeting\": {\n            \"primary_keywords\": seed_keywords[:15],\n            \"long_tail_phrases\": seed_phrases[:10],\n            \"all_seed_keywords\": all_seeds\n        },\n        \"google_ads_commands\": {\n            \"youtube_integration\": command,\n            \"traditional_research\": command_traditional\n        },\n        \"targeting_recommendations\": {\n            \"audience_interests\": content_analysis.get(\"content_themes\", []),\n            \"content_categories\": analysis_summary.get('content_categories', []),\n            \"high_value_keywords\": [kw[\"keyword\"] for kw in combined_keywords[:10]] if combined_keywords else [],\n            \"demographic_insights\": {\n                \"total_potential_reach\": analysis_summary.get('total_views', 0),\n                \"content_mix\": analysis_summary.get('content_categories', [])\n            }\n        }\n    }\n    \n    # Save targeting suggestions\n    try:\n        with open(\"google_ads_targeting_suggestions.json\", 'w', encoding='utf-8') as f:\n            json.dump(targeting_suggestions, f, indent=2, ensure_ascii=False)\n        print(\"✅ Targeting suggestions saved to: google_ads_targeting_suggestions.json\")\n    except IOError as e:\n        print(f\"❌ Error saving targeting suggestions: {e}\")\n    \n    print(f\"\\n🎉 PIPELINE COMPLETE!\")\n    print(\"=\" * 70)\n    print(\"\\n📋 SUMMARY:\")\n    print(f\"   • Analyzed {analysis_summary.get('videos_analyzed')} YouTube videos\")\n    print(f\"   • Extracted {len(all_seeds)} potential keyword seeds\")\n    print(f\"   • Identified {len(analysis_summary.get('content_themes', []))} content themes\")\n    print(f\"   • Prepared Google Ads research commands\")\n    print(f\"   • Saved targeting suggestions for campaign setup\")\n    \n    print(\"\\n🚀 NEXT STEPS:\")\n    print(\"   1. Set up Google Ads API credentials in google-ads.yaml\")\n    print(\"   2. Replace YOUR_CUSTOMER_ID with your actual customer ID\")\n    print(\"   3. Run the generated commands to get keyword volumes and competition\")\n    print(\"   4. Use the results to build targeted ad campaigns\")\n    \n    return targeting_suggestions\n\n\ndef show_integration_examples():\n    \"\"\"Show examples of how the extracted content integrates with different marketing goals.\"\"\"\n    print(\"\\n💡 INTEGRATION EXAMPLES\")\n    print(\"=\" * 40)\n    \n    # Load the results if available\n    try:\n        with open(\"complete_pipeline_results.json\", 'r', encoding='utf-8') as f:\n            results = json.load(f)\n        \n        tokenization = results.get(\"tokenization_results\", {})\n        analysis_summary = results.get(\"analysis_summary\", {})\n        \n        print(\"\\n🎯 MARKETING CAMPAIGN IDEAS BASED ON CONTENT:\")\n        \n        # Content themes to campaign types\n        themes = analysis_summary.get(\"content_themes\", [])\n        categories = analysis_summary.get(\"content_categories\", [])\n        \n        if \"Technology\" in themes:\n            print(\"\\n   💻 Technology Focus:\")\n            print(\"      - Target tech professionals and IT decision makers\")\n            print(\"      - Focus on B2B software solutions\")\n            print(\"      - Emphasize efficiency and automation benefits\")\n        \n        if \"Business\" in themes:\n            print(\"\\n   📊 Business Focus:\")\n            print(\"      - Target business owners and managers\")\n            print(\"      - Focus on ROI and business growth\")\n            print(\"      - Emphasize competitive advantages\")\n        \n        if \"Music\" in categories:\n            print(\"\\n   🎵 Entertainment/Music Focus:\")\n            print(\"      - Target music lovers and entertainment seekers\")\n            print(\"      - Focus on lifestyle and personal enjoyment\")\n            print(\"      - Consider viral/nostalgia marketing angles\")\n        \n        # Top keywords to ad copy suggestions\n        combined_keywords = tokenization.get(\"combined_keywords\", [])\n        if combined_keywords:\n            print(\"\\n📝 AD COPY SUGGESTIONS FROM TOP KEYWORDS:\")\n            for kw in combined_keywords[:5]:\n                keyword = kw[\"keyword\"]\n                if keyword.lower() in [\"salesforce\", \"crm\", \"data\", \"customer\"]:\n                    print(f\"      • '{keyword}' → 'Improve your {keyword} management with...'\")\n                elif keyword.lower() in [\"never\", \"give\", \"gon\"]:\n                    print(f\"      • '{keyword}' → 'Never give up on your goals with...'\")\n                else:\n                    print(f\"      • '{keyword}' → 'Transform your {keyword} strategy with...'\")\n        \n        # Audience insights\n        total_views = analysis_summary.get(\"total_views\", 0)\n        if total_views > 1000000:\n            print(f\"\\n👥 AUDIENCE INSIGHTS (Based on {total_views:,} total views):\")\n            print(\"      - High engagement potential\")\n            print(\"      - Broad audience appeal\")\n            print(\"      - Consider lookalike audiences\")\n            print(\"      - Test multiple ad formats\")\n        \n    except FileNotFoundError:\n        print(\"   Run the main pipeline first to see integration examples\")\n\n\nif __name__ == \"__main__\":\n    # Run the complete pipeline\n    targeting_suggestions = demo_complete_pipeline()\n    \n    # Show integration examples\n    show_integration_examples()\n    \n    print(\"\\n\" + \"=\" * 70)\n    print(\"🎯 PIPELINE DEMONSTRATION COMPLETE!\")\n    print(\"Check the generated files for detailed results and suggestions.\")\n    print(\"=\" * 70)
